<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="f42d9446-6b2a-4a71-bef3-fbceb9655f1b" created="3.43.1" activeEnvironment="Default environment" name="Project 1" projectVersion="" updated="3.43.1" encryptionMode="Not encrypted" compositeProjectFormat="1.3" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  <con:requirements/>
  <con:properties/>
  <con:wssContainer/>
  <con:databaseConnectionContainer>
    <con:databaseConnection>
      <con:name>local_db</con:name>
      <con:driver>com.microsoft.sqlserver.jdbc.SQLServerDriver</con:driver>
      <con:connectionString>jdbc:sqlserver://127.0.0.1:1433;databaseName=TestDB;user=SA;password=PASS_VALUE</con:connectionString>
      <con:password>Passw0rd123</con:password>
      <con:connectionProperties/>
    </con:databaseConnection>
  </con:databaseConnectionContainer>
  <con:jmsConnectionContainer/>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:eventHandlers type="RequestFilter.filterRequest" name="RequestFilter.filterRequest">
    <con:script>// Sample event script to add custom HTTP header to all outgoing REST, SOAP and HTTP(S) calls
// This code is often used for adding custom authentication to ReadyAPI functional tests

// If hardcoding the token, uncomment and change line 5
// token = '4567'

// If your token is parameterized in Project level custom property, uncomment line 8
// token = request.parent.testCase.testSuite.project.getProperty('auth_token').getValue()

// To modify all outgoing calls, remove comments from lines 11 to 16
// headers = request.requestHeaders
// if (headers.containsKey('auth_token2') == false) {
//   headers.put('auth_token2', token)
//   request.requestHeaders = headers
// }</con:script>
  </con:eventHandlers>
  <con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep">
    <con:script>// Save all test step results into files
// Change the directory path in line 5 to a location where you want to store details
// then uncomment lines 5 to 10

// filePath = 'C:\\tempOutputDirectory\\'
// fos = new java.io.FileOutputStream(filePath + testStepResult.testStep.label + '.txt', true)
// pw = new java.io.PrintWriter(fos)
// testStepResult.writeTo(pw)
// pw.close()
// fos.close()</con:script>
  </con:eventHandlers>
  <con:authRepository/>
  <con:tags/>
  <con:kafkaConnectionSettingsContainer>
    <con:connectionSettings id="0a03827e-6bc6-44bd-9c96-68646e6d068e">
      <con:subscribeProperties/>
      <con:publishProperties/>
      <con:schemaRegistry>
        <con:url/>
        <con:authProfile>No Authorization</con:authProfile>
      </con:schemaRegistry>
      <con:closeConditionType>ANY_CONDITION</con:closeConditionType>
      <con:maxIdleTime>60</con:maxIdleTime>
      <con:maxMessagesReceived>50</con:maxMessagesReceived>
      <con:maxRunTime>60</con:maxRunTime>
      <con:ignoreMessagesBeforeConnect>false</con:ignoreMessagesBeforeConnect>
    </con:connectionSettings>
    <con:connectionSettings id="4a9b4b55-2b95-434e-a290-d617b77e4399">
      <con:subscribeProperties/>
      <con:publishProperties/>
      <con:schemaRegistry/>
      <con:closeConditionType>ANY_CONDITION</con:closeConditionType>
      <con:maxIdleTime>60</con:maxIdleTime>
      <con:maxMessagesReceived>50</con:maxMessagesReceived>
      <con:maxRunTime>60</con:maxRunTime>
      <con:ignoreMessagesBeforeConnect>false</con:ignoreMessagesBeforeConnect>
    </con:connectionSettings>
  </con:kafkaConnectionSettingsContainer>
</con:soapui-project>
